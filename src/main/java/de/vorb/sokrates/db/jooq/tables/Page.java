/*
 * This file is generated by jOOQ.
*/
package de.vorb.sokrates.db.jooq.tables;


import de.vorb.sokrates.db.jooq.Keys;
import de.vorb.sokrates.db.jooq.Public;
import de.vorb.sokrates.db.jooq.tables.records.PageRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Page extends TableImpl<PageRecord> {

    private static final long serialVersionUID = 133028990;

    /**
     * The reference instance of <code>PUBLIC.PAGE</code>
     */
    public static final Page PAGE = new Page();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageRecord> getRecordType() {
        return PageRecord.class;
    }

    /**
     * The column <code>PUBLIC.PAGE.ID</code>.
     */
    public final TableField<PageRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_78812057_3AC2_4B4A_A874_6AC5C405C630)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.PAGE.PATH</code>.
     */
    public final TableField<PageRecord, String> PATH = createField("PATH", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.TITLE</code>.
     */
    public final TableField<PageRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(2147483647).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.CREATED_AT</code>.
     */
    public final TableField<PageRecord, Timestamp> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.LAST_MODIFIED_AT</code>.
     */
    public final TableField<PageRecord, Timestamp> LAST_MODIFIED_AT = createField("LAST_MODIFIED_AT", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.CHECKSUM</code>.
     */
    public final TableField<PageRecord, byte[]> CHECKSUM = createField("CHECKSUM", org.jooq.impl.SQLDataType.VARBINARY.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.PAGE</code> table reference
     */
    public Page() {
        this("PAGE", null);
    }

    /**
     * Create an aliased <code>PUBLIC.PAGE</code> table reference
     */
    public Page(String alias) {
        this(alias, PAGE);
    }

    private Page(String alias, Table<PageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Page(String alias, Table<PageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PageRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PageRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PageRecord>> getKeys() {
        return Arrays.<UniqueKey<PageRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page as(String alias) {
        return new Page(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Page rename(String name) {
        return new Page(name, null);
    }
}
