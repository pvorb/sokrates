/*
 * This file is generated by jOOQ.
*/
package de.vorb.sokrates.db.jooq.tables;


import de.vorb.sokrates.db.converters.LocaleConverter;
import de.vorb.sokrates.db.converters.PathConverter;
import de.vorb.sokrates.db.jooq.Indexes;
import de.vorb.sokrates.db.jooq.Keys;
import de.vorb.sokrates.db.jooq.Public;
import de.vorb.sokrates.db.jooq.tables.records.PageRecord;

import java.nio.file.Path;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Page extends TableImpl<PageRecord> {

    private static final long serialVersionUID = 2086526137;

    /**
     * The reference instance of <code>PUBLIC.PAGE</code>
     */
    public static final Page PAGE = new Page();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageRecord> getRecordType() {
        return PageRecord.class;
    }

    /**
     * The column <code>PUBLIC.PAGE.ID</code>.
     */
    public final TableField<PageRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.PAGE.SOURCE_FILE_PATH</code>.
     */
    public final TableField<PageRecord, Path> SOURCE_FILE_PATH = createField("SOURCE_FILE_PATH", org.jooq.impl.SQLDataType.VARCHAR(2147483647).nullable(false), this, "", new PathConverter());

    /**
     * The column <code>PUBLIC.PAGE.SOURCE_FILE_FORMAT</code>.
     */
    public final TableField<PageRecord, String> SOURCE_FILE_FORMAT = createField("SOURCE_FILE_FORMAT", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.OUTPUT_FILE_PATH</code>.
     */
    public final TableField<PageRecord, Path> OUTPUT_FILE_PATH = createField("OUTPUT_FILE_PATH", org.jooq.impl.SQLDataType.VARCHAR(2147483647).nullable(false), this, "", new PathConverter());

    /**
     * The column <code>PUBLIC.PAGE.TITLE</code>.
     */
    public final TableField<PageRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR(2147483647).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.CREATED_AT</code>.
     */
    public final TableField<PageRecord, LocalDate> CREATED_AT = createField("CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.LAST_MODIFIED_AT</code>.
     */
    public final TableField<PageRecord, LocalDate> LAST_MODIFIED_AT = createField("LAST_MODIFIED_AT", org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE.LOCALE</code>.
     */
    public final TableField<PageRecord, Locale> LOCALE = createField("LOCALE", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "", new LocaleConverter());

    /**
     * The column <code>PUBLIC.PAGE.CHECKSUM</code>.
     */
    public final TableField<PageRecord, byte[]> CHECKSUM = createField("CHECKSUM", org.jooq.impl.SQLDataType.VARBINARY.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.PAGE</code> table reference
     */
    public Page() {
        this(DSL.name("PAGE"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PAGE</code> table reference
     */
    public Page(String alias) {
        this(DSL.name(alias), PAGE);
    }

    /**
     * Create an aliased <code>PUBLIC.PAGE</code> table reference
     */
    public Page(Name alias) {
        this(alias, PAGE);
    }

    private Page(Name alias, Table<PageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Page(Name alias, Table<PageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_2, Indexes.CONSTRAINT_INDEX_25, Indexes.IDX__PAGE__CREATED_AT, Indexes.IDX__PAGE__LAST_MODIFIED_AT, Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PageRecord, Long> getIdentity() {
        return Keys.IDENTITY_PAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PageRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PageRecord>> getKeys() {
        return Arrays.<UniqueKey<PageRecord>>asList(Keys.CONSTRAINT_2, Keys.CONSTRAINT_25, Keys.CONSTRAINT_255);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page as(String alias) {
        return new Page(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Page as(Name alias) {
        return new Page(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Page rename(String name) {
        return new Page(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Page rename(Name name) {
        return new Page(name, null);
    }
}
