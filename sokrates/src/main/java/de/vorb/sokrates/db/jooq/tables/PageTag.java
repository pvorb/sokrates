/*
 * This file is generated by jOOQ.
*/
package de.vorb.sokrates.db.jooq.tables;


import de.vorb.sokrates.db.jooq.Indexes;
import de.vorb.sokrates.db.jooq.Keys;
import de.vorb.sokrates.db.jooq.Public;
import de.vorb.sokrates.db.jooq.tables.records.PageTagRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageTag extends TableImpl<PageTagRecord> {

    private static final long serialVersionUID = -258940434;

    /**
     * The reference instance of <code>PUBLIC.PAGE_TAG</code>
     */
    public static final PageTag PAGE_TAG = new PageTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageTagRecord> getRecordType() {
        return PageTagRecord.class;
    }

    /**
     * The column <code>PUBLIC.PAGE_TAG.PAGE_ID</code>.
     */
    public final TableField<PageTagRecord, Long> PAGE_ID = createField("PAGE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAGE_TAG.TAG_ID</code>.
     */
    public final TableField<PageTagRecord, Long> TAG_ID = createField("TAG_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.PAGE_TAG</code> table reference
     */
    public PageTag() {
        this(DSL.name("PAGE_TAG"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PAGE_TAG</code> table reference
     */
    public PageTag(String alias) {
        this(DSL.name(alias), PAGE_TAG);
    }

    /**
     * Create an aliased <code>PUBLIC.PAGE_TAG</code> table reference
     */
    public PageTag(Name alias) {
        this(alias, PAGE_TAG);
    }

    private PageTag(Name alias, Table<PageTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageTag(Name alias, Table<PageTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_6, Indexes.PRIMARY_KEY_61);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PageTagRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PageTagRecord>> getKeys() {
        return Arrays.<UniqueKey<PageTagRecord>>asList(Keys.CONSTRAINT_6);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PageTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PageTagRecord, ?>>asList(Keys.CONSTRAINT_61, Keys.CONSTRAINT_61F);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PageTag as(String alias) {
        return new PageTag(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PageTag as(Name alias) {
        return new PageTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageTag rename(String name) {
        return new PageTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageTag rename(Name name) {
        return new PageTag(name, null);
    }
}
