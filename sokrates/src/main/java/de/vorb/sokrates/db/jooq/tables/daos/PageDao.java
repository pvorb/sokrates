/*
 * This file is generated by jOOQ.
*/
package de.vorb.sokrates.db.jooq.tables.daos;


import de.vorb.sokrates.db.jooq.tables.Page;
import de.vorb.sokrates.db.jooq.tables.records.PageRecord;

import java.nio.file.Path;
import java.time.LocalDate;
import java.util.List;
import java.util.Locale;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageDao extends DAOImpl<PageRecord, de.vorb.sokrates.db.jooq.tables.pojos.Page, Long> {

    /**
     * Create a new PageDao without any configuration
     */
    public PageDao() {
        super(Page.PAGE, de.vorb.sokrates.db.jooq.tables.pojos.Page.class);
    }

    /**
     * Create a new PageDao with an attached configuration
     */
    public PageDao(Configuration configuration) {
        super(Page.PAGE, de.vorb.sokrates.db.jooq.tables.pojos.Page.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(de.vorb.sokrates.db.jooq.tables.pojos.Page object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchById(Long... values) {
        return fetch(Page.PAGE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public de.vorb.sokrates.db.jooq.tables.pojos.Page fetchOneById(Long value) {
        return fetchOne(Page.PAGE.ID, value);
    }

    /**
     * Fetch records that have <code>SOURCE_FILE_PATH IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchBySourceFilePath(Path... values) {
        return fetch(Page.PAGE.SOURCE_FILE_PATH, values);
    }

    /**
     * Fetch a unique record that has <code>SOURCE_FILE_PATH = value</code>
     */
    public de.vorb.sokrates.db.jooq.tables.pojos.Page fetchOneBySourceFilePath(Path value) {
        return fetchOne(Page.PAGE.SOURCE_FILE_PATH, value);
    }

    /**
     * Fetch records that have <code>SOURCE_FILE_FORMAT IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchBySourceFileFormat(String... values) {
        return fetch(Page.PAGE.SOURCE_FILE_FORMAT, values);
    }

    /**
     * Fetch records that have <code>OUTPUT_FILE_PATH IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchByOutputFilePath(Path... values) {
        return fetch(Page.PAGE.OUTPUT_FILE_PATH, values);
    }

    /**
     * Fetch a unique record that has <code>OUTPUT_FILE_PATH = value</code>
     */
    public de.vorb.sokrates.db.jooq.tables.pojos.Page fetchOneByOutputFilePath(Path value) {
        return fetchOne(Page.PAGE.OUTPUT_FILE_PATH, value);
    }

    /**
     * Fetch records that have <code>TITLE IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchByTitle(String... values) {
        return fetch(Page.PAGE.TITLE, values);
    }

    /**
     * Fetch records that have <code>CREATED_AT IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchByCreatedAt(LocalDate... values) {
        return fetch(Page.PAGE.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>LAST_MODIFIED_AT IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchByLastModifiedAt(LocalDate... values) {
        return fetch(Page.PAGE.LAST_MODIFIED_AT, values);
    }

    /**
     * Fetch records that have <code>LOCALE IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchByLocale(Locale... values) {
        return fetch(Page.PAGE.LOCALE, values);
    }

    /**
     * Fetch records that have <code>CHECKSUM IN (values)</code>
     */
    public List<de.vorb.sokrates.db.jooq.tables.pojos.Page> fetchByChecksum(byte[]... values) {
        return fetch(Page.PAGE.CHECKSUM, values);
    }
}
